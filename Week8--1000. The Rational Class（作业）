http://soj.me/show_problem.php?cid=1353&pid=1000
======
#include<iostream>
#include<cstring>
#include<string>
#include<cstdio>
#include<stdlib.h>
using namespace std;

class Rational
{
public:
  Rational();
  Rational(long numerator, long denominator);
  long getNumerator();
  long getDenominator();
  Rational add(Rational &secondRational);
  Rational subtract(Rational &secondRational);
  Rational multiply(Rational &secondRational);
  Rational divide(Rational &secondRational);
  int compareTo(Rational &secondRational);	// ”<”: -1, “=”: 0, “>”: 1
  bool equals(Rational &secondRational);
  int intValue();
  double doubleValue();
  string toString();
 
  // Define function operators for relational operators
  bool operator<(Rational &secondRational);
  bool operator<=(Rational &secondRational);
  bool operator>(Rational &secondRational);
  bool operator>=(Rational &secondRational);
  bool operator!=(Rational &secondRational);
  bool operator==(Rational &secondRational);
 
  // Define function operators for arithmetic operators
  Rational operator+(Rational &secondRational);
  Rational operator-(Rational &secondRational);
  Rational operator*(Rational &secondRational);
  Rational operator/(Rational &secondRational);
 
  // Define function operators for shorthand operators
  Rational& operator+=(Rational &secondRational);
  Rational& operator-=(Rational &secondRational);
  Rational& operator*=(Rational &secondRational);
  Rational& operator/=(Rational &secondRational);
 
  // Define function operator [], 0 for numerator and 1 for denominator
  long& operator[](const int &index);
 
  // Define function operators for prefix ++ and --
  Rational& operator++();
  Rational& operator--();
 
  // Define function operators for postfix ++ and --
  Rational operator++(int dummy);
  Rational operator--(int dummy);
 
  // Define function operators for unary + and -
  Rational operator+();
  Rational operator-();
 
  // Define the output and input operator
  friend ostream &operator<<(ostream &stream, Rational rational);
  friend istream &operator>>(istream &stream, Rational &rational);
 
  // Define function operator for conversion
  operator double();
 
private:
  long numerator;
  long denominator;
  static long gcd(long n, long d);
};

Rational::Rational()
{
	numerator = 0;
    denominator = 1;
}

Rational::Rational(long numerator, long denominator)
{
	long factor = gcd(numerator, denominator);
    this->numerator = ((denominator > 0) ? 1 : -1) * numerator / factor;
    this->denominator = abs(denominator) / factor;
}

long Rational::getNumerator()
{
	return numerator;
}

long Rational::getDenominator()
{
	return denominator;
}

long Rational::gcd(long n, long d) {
    long n1 = abs(n);
    long n2 = abs(d);
    int gcd = 1;

    for (int k = 1; k <= n1 && k <= n2; k++)
    {
        if (n1 % k == 0 && n2 % k == 0)
          gcd = k;
    }

    return gcd;
}

Rational Rational::add(Rational &secondRational)
{
	long n = numerator * secondRational.getDenominator() + denominator * secondRational.getNumerator();
    long d = denominator * secondRational.getDenominator();
    return Rational(n, d);
}

Rational Rational::subtract(Rational &secondRational)
{
	long n = numerator * secondRational.getDenominator() - denominator * secondRational.getNumerator();
	long d = denominator * secondRational.getDenominator();
	return Rational(n,d);
}

Rational Rational::multiply(Rational &secondRational)
{
	long n = numerator * secondRational.getNumerator();
    long d = denominator * secondRational.getDenominator();
    return Rational(n, d);
}

Rational Rational::divide(Rational &secondRational)
{
	long n = numerator * secondRational.getDenominator();
    long d = denominator * secondRational.getNumerator();
    return Rational(n, d);
}

int Rational::compareTo(Rational &secondRational)
{
	Rational temp = this->subtract(secondRational);
    if (temp.getNumerator() < 0)  return -1;
    else if (temp.getNumerator() == 0)  return 0;
    else  return 1;
}

bool Rational::equals(Rational &secondRational)
{
	if (this->compareTo(secondRational) == 0)  return true;
	else return false;
}

int Rational::intValue()
{
	return getNumerator() / getDenominator();
}

double Rational::doubleValue()
{
	return 1.0 * getNumerator() / getDenominator() ;
}

string Rational:: toString()
{
    char b[500];
    sprintf(b,"%lf",doubleValue());
    string tmp = b;
    return tmp;
}


bool Rational::operator<(Rational &secondRational)
{
	if (this->compareTo(secondRational) < 0)   return true; 
    else   return false; 
}

bool Rational::operator<=(Rational &secondRational)
{
	if (this->compareTo(secondRational) <= 0)   return true; 
    else   return false; 
}

bool Rational::operator>(Rational &secondRational)
{
	if (this->compareTo(secondRational) > 0)   return true; 
    else   return false; 
}

bool Rational::operator>=(Rational &secondRational)
{
	if (this->compareTo(secondRational) >= 0)   return true; 
    else   return false; 
}

bool Rational::operator!=(Rational &secondRational)
{
	if (this->compareTo(secondRational) != 0)   return true; 
    else   return false; 
}

bool Rational::operator==(Rational &secondRational)
{
	if (this->compareTo(secondRational) == 0)   return true; 
    else   return false; 
}

Rational Rational::operator+(Rational &secondRational)
{
	return this->add(secondRational);
}

Rational Rational::operator-(Rational &secondRational)
{
	return this->subtract(secondRational);
}

Rational Rational::operator*(Rational &secondRational)
{
	return this->multiply(secondRational);
}

Rational Rational::operator/(Rational &secondRational)
{
	return this->divide(secondRational);
}

Rational& Rational::operator+=(Rational &secondRational)
{
	*this = this->add(secondRational); 
    return (*this); 

}

Rational& Rational::operator-=(Rational &secondRational)
{
	*this = this->subtract(secondRational); 
    return (*this); 
}

Rational& Rational::operator*=(Rational &secondRational)
{
	*this = this->multiply(secondRational); 
    return (*this); 
}

Rational& Rational::operator/=(Rational &secondRational)
{
	*this = this->divide(secondRational); 
    return (*this); 
}

long& Rational::operator[](const int &index)                  
{
	if (index == 0)   return numerator; 
    else if (index == 1)   return denominator; 
    else { 
//		cout << “subscript error” << endl; 
//        exit(0); 
    } 
}

Rational& Rational:: operator++()
{
    numerator += denominator;
    return *this;
}

Rational& Rational:: operator--()
{
    numerator -= denominator;
    return *this;
}

Rational Rational:: operator++(int dummy)
{
    Rational tmp = *this;
    ++(*this);
    return tmp;
}

Rational Rational:: operator--(int dummy)
{
    Rational tmp = *this;
    --(*this);
    return tmp;
}

Rational Rational::operator+()
{
	numerator *= 1; 
    return *this; 
}

Rational Rational::operator-()
{
	numerator *= -1; 
    return *this; 
}

ostream &operator<<(ostream &stream, Rational rational)
{
    stream << rational.numerator;
	if(rational.denominator != 1)  stream<< "/" << rational.denominator;
    return stream;
}

 istream &operator>>(istream &stream, Rational &rational)
{
    cout << "Enter numerator: ";
    stream >> rational.numerator;

    cout << "Enter denominator: ";
    stream >> rational[1];
    return stream;
}

Rational::operator double()            
{
	return doubleValue();
}

int main()
{
  // Create and initialize two rational numbers r1 and r2.
  Rational r1(3, 2);
  Rational r2(2, 3);
 
  // Test relational operators
  cout << r1 << " > " << r2 << " is " << (r1 > r2) << endl;
  cout << r1 << " >= " << r1 << " is " << (r1 >= r1) << endl; 
  cout << r1 << " < " << r2 << " is " << (r1 < r2) << endl;
  cout << r1 << " <= " << r1 << " is " << (r1 <= r1) << endl;
  cout << r1 << " == " << r2 << " is " << (r1 == r2) << endl;
  cout << r1 << " == " << r1 << " is " << (r1 == r1) << endl;
  cout << r1 << " != " << r2 << " is " << (r1 != r2) << endl;
  cout << r1 << " != " << r1 << " is " << (r1 != r1) << endl;
 
 
  // Test toString, add, substract, multiply, and divide operators
  cout << r1 << " + " << r2 << " = " << r1 + r2 << endl;
  cout << r1 << " - " << r2 << " = " << r1 - r2 << endl;
  cout << r1 << " * " << r2 << " = " << r1 * r2 << endl;
  cout << r1 << " / " << r2 << " = " << r1 / r2 << endl;
 
  // Test shorthand operators
  Rational r3(1, 2);
  r3 += r1;
  cout << "r3 is " << r3 << endl;
  r3 -= r1;
  cout << "r3 is " << r3 << endl;
  
  // Test function operator []
  Rational r4(1, 2);
  r4[0] = 3; r4[1] = 4;
  cout << "r4 is " << r4 << endl;
 
  // Test function operators for 
  // prefix ++ and --
  // postfix ++ and --
  r3 = r4++;
  cout << "r3 is " << r3 << endl;
  cout << "r4 is " << r4 << endl;
  r3 = r4--;
  cout << "r3 is " << r3 << endl;
  cout << "r4 is " << r4 << endl;
 
 
  r3 = ++r4;
  cout << "r3 is " << r3 << endl;
  cout << "r4 is " << r4 << endl;
  r3 = --r4;
  cout << "r3 is " << r3 << endl;
  cout << "r4 is " << r4 << endl;
 
  // Test function operator for conversion
  cout << "1 + " << r4 << " is " << (1 + r4) << endl;
 
 
  return 0;
}
